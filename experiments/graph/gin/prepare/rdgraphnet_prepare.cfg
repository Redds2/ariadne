import experiments.graph.requester

preprocess_mp.transformer = @transformer()
preprocess_mp.target_processor = @graph_preprocessor()
preprocess_mp.target_postprocessor = @save_graphs()

preprocess_mp.output_dir = 'output/mp/cgem_t_LINEGRAPH_SUPERNEW'


parse.input_file_mask='data/bes3/events/3.txt'
#parse.input_file_mask='/zfs/hybrilit.jinr.ru/user/p/pgonchar/data/bes3/events/2?0.txt'

parse.csv_params={
                    "sep": '\s+',
                    #"nrows": 10000,
                    "encoding": 'utf-8',
                    "names":  ['event',  'x', 'y', 'z', 'station',
                               'track', 'px', 'py', 'pz', 'X0', 'Y0', 'Z0']
                 }

### events_quantity:
# '1..10' (list of events with these indexes)
# or ':' (all events from df)
# or single index '3'
parse.events_quantity = ':'

# preprocessor
transformer.transforms = [
    @DropSpinningTracks(),
    @DropShort(),
    @DropEmpty(),
    @ToCylindrical(),
    @ConstraintsNormalize()
]
graph_preprocessor.suffixes_df = ('_p', '_c')
graph_preprocessor.get_pd_line_graph = {
    'restrictions_0':(-0.07, 0.07),
    'restrictions_1':(-0.32, 0.32),
    'suffix_c': '_c',
    'suffix_p': '_p'
}
graph_preprocessor.get_supernodes_df = {
    'suffix_c': '_c',
    'suffix_p': '_p',
    'axes':['r', 'phi', 'z']
}

graph_preprocessor.apply_edge_restriction = {'edge_restriction' : 0.16}


#### transformations
DropShort.num_stations=3
ConstraintsNormalize.use_global_constraints = True
ConstraintsNormalize.columns=('r', 'phi', 'z')
ConstraintsNormalize.constraints = {
    'r': [80., 167.], 'phi': [-3.15, 3.15], 'z': [-423.5, 423.5]
}

